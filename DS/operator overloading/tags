!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
FRACTION_H_	.\fraction.h	2;"	d
Fraction	.\fraction.cc	/^Fraction::Fraction()$/;"	f	class:Fraction	signature:()
Fraction	.\fraction.cc	/^Fraction::Fraction(const Fraction& f)$/;"	f	class:Fraction	signature:(const Fraction& f)
Fraction	.\fraction.cc	/^Fraction::Fraction(int num, int deno)$/;"	f	class:Fraction	signature:(int num, int deno)
Fraction	.\fraction.h	/^  Fraction();$/;"	p	class:Fraction	access:public	signature:()
Fraction	.\fraction.h	/^  Fraction(const Fraction& f);$/;"	p	class:Fraction	access:public	signature:(const Fraction& f)
Fraction	.\fraction.h	/^  Fraction(int num, int deno);$/;"	p	class:Fraction	access:public	signature:(int num, int deno)
Fraction	.\fraction.h	/^class Fraction$/;"	c
Fraction::Fraction	.\fraction.cc	/^Fraction::Fraction()$/;"	f	class:Fraction	signature:()
Fraction::Fraction	.\fraction.cc	/^Fraction::Fraction(const Fraction& f)$/;"	f	class:Fraction	signature:(const Fraction& f)
Fraction::Fraction	.\fraction.cc	/^Fraction::Fraction(int num, int deno)$/;"	f	class:Fraction	signature:(int num, int deno)
Fraction::Fraction	.\fraction.h	/^  Fraction();$/;"	p	class:Fraction	access:public	signature:()
Fraction::Fraction	.\fraction.h	/^  Fraction(const Fraction& f);$/;"	p	class:Fraction	access:public	signature:(const Fraction& f)
Fraction::Fraction	.\fraction.h	/^  Fraction(int num, int deno);$/;"	p	class:Fraction	access:public	signature:(int num, int deno)
Fraction::denominator	.\fraction.h	/^  int denominator;$/;"	m	class:Fraction	access:private
Fraction::numerator	.\fraction.h	/^  int numerator;$/;"	m	class:Fraction	access:private
Fraction::operator !	.\fraction.h	/^  bool operator!();$/;"	p	class:Fraction	access:public	signature:()
Fraction::operator !=	.\fraction.h	/^  friend bool operator!=(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator *	.\fraction.h	/^  friend Fraction operator*(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator +	.\fraction.h	/^  friend Fraction operator+(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator ++	.\fraction.h	/^  Fraction operator++(int);$/;"	p	class:Fraction	access:public	signature:(int)
Fraction::operator ++	.\fraction.h	/^  Fraction& operator++();$/;"	p	class:Fraction	access:public	signature:()
Fraction::operator -	.\fraction.h	/^  Fraction operator-();$/;"	p	class:Fraction	access:public	signature:()
Fraction::operator -	.\fraction.h	/^  friend Fraction operator-(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator --	.\fraction.h	/^  Fraction operator--(int);$/;"	p	class:Fraction	access:public	signature:(int)
Fraction::operator --	.\fraction.h	/^  Fraction& operator--();$/;"	p	class:Fraction	access:public	signature:()
Fraction::operator /	.\fraction.h	/^  friend Fraction operator\/(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator <	.\fraction.h	/^  friend bool operator<(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator <<	.\fraction.h	/^  friend std::ostream& operator<<(std::ostream& out, const Fraction& f);$/;"	p	class:Fraction	access:friend	signature:(std::ostream& out, const Fraction& f)
Fraction::operator <=	.\fraction.h	/^  friend bool operator<=(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator =	.\fraction.h	/^  Fraction& operator=(const Fraction& f);$/;"	p	class:Fraction	access:public	signature:(const Fraction& f)
Fraction::operator ==	.\fraction.h	/^  friend bool operator==(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator >	.\fraction.h	/^  friend bool operator>(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator >=	.\fraction.h	/^  friend bool operator>=(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
Fraction::operator >>	.\fraction.h	/^  friend std::istream& operator>>(std::istream& in, const Fraction& f);$/;"	p	class:Fraction	access:friend	signature:(std::istream& in, const Fraction& f)
Fraction::reciprocal	.\fraction.h	/^  Fraction& reciprocal();$/;"	p	class:Fraction	access:public	signature:()
Fraction::reduction	.\fraction.cc	/^Fraction& Fraction::reduction()$/;"	f	class:Fraction	signature:()
Fraction::reduction	.\fraction.h	/^  Fraction& reduction();$/;"	p	class:Fraction	access:public	signature:()
Fraction::~Fraction	.\fraction.cc	/^virtual Fraction::~Fraction()$/;"	f	class:Fraction	signature:()
Fraction::~Fraction	.\fraction.h	/^  virtual ~Fraction();$/;"	p	class:Fraction	access:public	signature:()
denominator	.\fraction.h	/^  int denominator;$/;"	m	class:Fraction	access:private
main	.\test.cc	/^int main()$/;"	f	signature:()
numerator	.\fraction.h	/^  int numerator;$/;"	m	class:Fraction	access:private
operator !	.\fraction.h	/^  bool operator!();$/;"	p	class:Fraction	access:public	signature:()
operator !=	.\fraction.h	/^  friend bool operator!=(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator *	.\fraction.h	/^  friend Fraction operator*(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator +	.\fraction.h	/^  friend Fraction operator+(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator ++	.\fraction.h	/^  Fraction operator++(int);$/;"	p	class:Fraction	access:public	signature:(int)
operator ++	.\fraction.h	/^  Fraction& operator++();$/;"	p	class:Fraction	access:public	signature:()
operator -	.\fraction.h	/^  Fraction operator-();$/;"	p	class:Fraction	access:public	signature:()
operator -	.\fraction.h	/^  friend Fraction operator-(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator --	.\fraction.h	/^  Fraction operator--(int);$/;"	p	class:Fraction	access:public	signature:(int)
operator --	.\fraction.h	/^  Fraction& operator--();$/;"	p	class:Fraction	access:public	signature:()
operator /	.\fraction.h	/^  friend Fraction operator\/(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator <	.\fraction.h	/^  friend bool operator<(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator <<	.\fraction.h	/^  friend std::ostream& operator<<(std::ostream& out, const Fraction& f);$/;"	p	class:Fraction	access:friend	signature:(std::ostream& out, const Fraction& f)
operator <=	.\fraction.h	/^  friend bool operator<=(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator =	.\fraction.h	/^  Fraction& operator=(const Fraction& f);$/;"	p	class:Fraction	access:public	signature:(const Fraction& f)
operator ==	.\fraction.h	/^  friend bool operator==(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator >	.\fraction.h	/^  friend bool operator>(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator >=	.\fraction.h	/^  friend bool operator>=(const Fraction& f1, const Fraction& f2);$/;"	p	class:Fraction	access:friend	signature:(const Fraction& f1, const Fraction& f2)
operator >>	.\fraction.h	/^  friend std::istream& operator>>(std::istream& in, const Fraction& f);$/;"	p	class:Fraction	access:friend	signature:(std::istream& in, const Fraction& f)
reciprocal	.\fraction.h	/^  Fraction& reciprocal();$/;"	p	class:Fraction	access:public	signature:()
reduction	.\fraction.cc	/^Fraction& Fraction::reduction()$/;"	f	class:Fraction	signature:()
reduction	.\fraction.h	/^  Fraction& reduction();$/;"	p	class:Fraction	access:public	signature:()
~Fraction	.\fraction.cc	/^virtual Fraction::~Fraction()$/;"	f	class:Fraction	signature:()
~Fraction	.\fraction.h	/^  virtual ~Fraction();$/;"	p	class:Fraction	access:public	signature:()
